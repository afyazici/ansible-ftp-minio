- name: Deploys VM based on cloud image
  hosts: localhost
  gather_facts: yes
  become: yes
  vars:
    vm_names:
      - host1
      - host2
      - host3
    base_image_name: Fedora-Cloud-Base-39-1.5.x86_64.qcow2
    base_image_url: https://ftp.linux.org.tr/fedora/releases/39/Cloud/x86_64/images/{{ base_image_name }}
    base_image_sha: ab5be5058c5c839528a7d6373934e0ce5ad6c8f80bd71ed3390032027da52f37
    libvirt_pool_dir: "/var/lib/libvirt/images"
    vm_vcpus: 1
    vm_ram_mb: 1024
    vm_net: default
    vm_root_pass: tor
    cleanup_tmp: no
    ssh_key: /root/.ssh/id_rsa.pub
    net_type: bridge
    net_name: virbr0
    net: default
    ssh_pub_key: "$HOME/.ssh/id_rsa.pub"
    pool_dir: "/var/lib/libvirt/images"
    vcpus: 1
    ram_mb: 1024
    cleanup: no

  tasks:
    - name: Ensure requirements in place
      package:
        name:
          - libguestfs-tools
          - python3-libvirt
        state: present
      become: yes

    - name: Get VMs list (not used in this case, but can be informative)
      community.libvirt.virt:
        command: list_vms
      register: existing_vms
      changed_when: no

    - name: Check if VM already exists (not strictly necessary here)
      set_fact:
        vm_exists: "{{ item in existing_vms.list_vms }}"
      loop: "{{ vm_names }}"

    - name: Download base image
      get_url:
        url: "{{ base_image_url }}"
        dest: "/tmp/{{ base_image_name }}"
        checksum: "sha256:{{ base_image_sha }}"
      when: not vm_exists

    - name: Copy base image to libvirt directory
      copy:
        dest: "{{ libvirt_pool_dir }}/{{ item }}.qcow2"
        src: "/tmp/{{ base_image_name }}"
        force: no
        remote_src: yes
        mode: 0660
      when: not vm_exists
      loop: "{{ vm_names }}"

    - name: Configure the image
      command: |
        virt-customize -a {{ libvirt_pool_dir }}/{{ item }}.qcow2 \
          --hostname {{ item }} \
          --root-password password:{{ vm_root_pass }} \
          --ssh-inject 'root:file:{{ ssh_key }}' \
          --uninstall cloud-init --selinux-relabel
      when: not vm_exists
      loop: "{{ vm_names }}"

    - name: Define vm
      community.libvirt.virt:
        command: define
        xml: "{{ lookup('template', 'vm-template.xml.j2') }}"
      when: not vm_exists
      loop: "{{ vm_names }}"

    - name: Ensure VM is started
      community.libvirt.virt:
        name: "{{ item }}"
        state: running
      register: vm_start_results
      until: "vm_start_results is success"
      retries: 15
      delay: 2
      when: not vm_exists
      loop: "{{ vm_names }}"

    - name: Ensure temporary file is deleted
      file:
        path: "/tmp/{{ base_image_name }}"
        state: absent
      when: cleanup_tmp | bool

    - name: wait 100 seconds for machine initialization to complete
      pause:
        seconds: 100


- name: Run shell script
  hosts: localhost
  gather_facts: no
  become: yes
  tasks:
    - name: Execute shell script
      shell: |
        #!/bin/sh
        # Loop through hosts
        for i in 1 2 3
        do
            # Komut çıktısını değişkene aktar
            output=$(virsh domifaddr "host$i" --source agent)

            # Eth0 satırını grep ile filtrele ve awk ile IP adresini al
            eth0_address=$(echo "$output" | grep "eth0" | awk '{print $4}')

            # /24 ifadesini kaldır
            eth0_address=$(echo "$eth0_address" | sed 's/\/24//')

            # Sonucu yazdır
            echo "$eth0_address"
            echo "[host$i]" >> hosts.ini
            echo "root@$eth0_address" >> hosts.ini
            echo "" >> hosts.ini
            echo "ip_host$i: $eth0_address" >> defaults/main.yml
        done

- name: Refreshing inventory
  hosts: localhost
  gather_facts: no
  tasks:
    - name: Thats refreshing..
      meta: refresh_inventory



- name: Deploy VSFTP to host2
  hosts: host2
  become: true
  tasks:
    - name: Install FTP package on RHEL
      ansible.builtin.package:
        name: vsftpd
        state: present
    - name: Modify FTP configuration
      ansible.builtin.lineinfile:
        dest: /etc/vsftpd/vsftpd.conf
        backup: yes
        state: present
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
      with_items:
        - regexp: anonymous_enable=NO
          line: anonymous_enable=YES
        - regexp: anon_upload_enable
          line: anon_upload_enable=YES
        - regexp: anon_mkdir_write_enable
          line: anon_mkdir_write_enable=YES
        - regexp: listen=NO
          line: listen=YES
        - regexp: listen_ipv6=YES
          line: listen_ipv6=NO
        - regexp: local_enable=NO
          line: local_enable=YES
        - regexp: pam_service_name
          line: pam_service_name=vsftpd
        - regexp: write_enable=NO
          line: write_enable=YES
        - regexp: anon_root
          line: anon_root=/var/ftp
        - regexp: no_anon_password=NO
          line: no_anon_password=YES
        - regexp: userlist_enable
          line: userlist_enable=YES
        - regexp: userlist_file=/etc/vsftpd/userlist
          line: userlist_file=/etc/vsftpd/user_list
        - regexp: userlist_deny
          line: userlist_deny=NO

- name: Add user ftpuser and configure FTP
  hosts: host2
  become: true
  vars:
    ftp_user: exoftp
  tasks:
    - name: Add user for ftp
      ansible.builtin.user:
        name: "{{ ftp_user }}"
        state: present
        password: "{{ 'tor' | password_hash('sha512') }}"
    - name: Create directories for ftp user
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: "{{ ftp_user }}"
        group: "{{ ftp_user }}"
        mode: '0755'
      with_items:
        - /home/{{ ftp_user }}/ftp
        - /home/{{ ftp_user }}/ftp/files
    - name: Create test file for ftp user
      ansible.builtin.copy:
        content: "vsftpd test file"
        dest: /home/{{ ftp_user }}/ftp/files/test.txt
        owner: "{{ ftp_user }}"
        group: "{{ ftp_user }}"
        mode: '0644'
    - name: Add ftp_user to user_list
      ansible.builtin.lineinfile:
        path: /etc/vsftpd/user_list
        line: "{{ ftp_user }}"
        create: yes
        state: present
    - name: Restart vsftpd service
      ansible.builtin.service:
        name: vsftpd
        state: restarted

- name: Host1 Deploy VSFTP and FTP
  hosts: host1
  become: true
  tasks:
    - block:
        - name: Install FTP package on RHEL
          ansible.builtin.package:
            name: vsftpd
            state: present
    - block:
        - name: Start FTP service
          become: yes
          service: name=vsftpd state=restarted enabled=yes
    - block:
        - name: Install FTP
          ansible.builtin.package:
            name: ftp
            state: present

#

- name: Install cron package on Fedora
  hosts: host1, host2
  become: true
  tasks:
    - name: Install cron package
      package:
        name: cronie  # Fedora'da cron paketi
        state: present


- name: Start crond service
  hosts: host1, host2
  become: true
  tasks:
    - name: Ensure crond service is running
      ansible.builtin.service:
        name: crond
        state: started


- name: Install Minio S3 Server
  hosts: host3
  become: true
  vars:
    # Minio binaries path
    minio_server_bin: /usr/local/bin/minio
    minio_client_bin: /usr/local/bin/mc
    minio_bucket_name: bigbuck
    # Runtime user and group for the Minio server service
    minio_user: minio
    minio_group: minio
    # Path to the file containing the ENV variables for the Minio server
    minio_server_envfile: /etc/default/minio
    # Minio server listen address
    minio_server_addr: ":9000"
    # Minio server data directories
    minio_server_datadirs:
      - /var/lib/minio
    minio_server_make_datadirs: true
    # Minio server cluster node list.
    minio_server_cluster_nodes: [ ]
    # Additional environment variables to be set in minio server environment
    minio_server_env_extra: ""
    # Additional Minio server CLI options
    minio_server_opts: ""
    # Minio access and secret keys
    minio_access_key: myReallyLongAccessKey
    minio_secret_key: mySuperSecretKey
    new_minio_user: forme1
    new_minio_passwd: deneme123456

  handlers:

    - name: restart minio
      service:
        name: minio
        state: restarted

  tasks:

    - name: Load vars from file
      include_vars:
        file: defaults/main.yml

    - name: Update system
      become: yes
      dnf:
        name: "*"
        state: latest

    - name: Install needed packages
      become: yes
      dnf:
        name: "{{ item }}"
        state: present
      loop:
        - firewalld

    - name: Create Minio group
      group:
        name: "{{ minio_group }}"
        state: present

    - name: Create Minio user
      user:
        name: "{{ minio_user }}"
        group: "{{ minio_group }}"
        shell: /bin/bash

    - name: Install wget
      dnf:
        name: wget
        state: present

    - name: Download Minio server
      become: yes
      command: wget https://dl.minio.io/server/minio/release/linux-amd64/minio -O {{ minio_server_bin }}

    - name: Set permissions for Minio Server binary
      become: yes
      file:
        path: "{{ minio_server_bin }}"
        mode: "0755"


    - name: Download Minio client
      become: yes
      command: wget https://dl.minio.io/client/mc/release/linux-amd64/mc -O {{ minio_client_bin }}

    - name: Set permissions for Minio client binary
      become: yes
      file:
        path: "{{ minio_client_bin }}"
        mode: "0755"

    - name: Create the Minio server systemd config
      template:
        src: minio.service.j2
        dest: "/etc/systemd/system/minio.service"
        owner: "root"
        group: "root"

    - name: Create the Minio server default config
      template:
        src: minio.j2
        dest: "{{ minio_server_envfile }}"
        owner: "root"
        group: "root"
        mode: 0640
      notify: restart minio

    - name: Create the Minio data storage directories
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ minio_user }}"
        group: "{{ minio_group }}"
        mode: 0750
      when: minio_server_make_datadirs
      loop: "{{ minio_server_datadirs }}"

    - name: Enable and start the Minio service
      service:
        name: minio
        state: started
        enabled: true

    - name: Set MinIO alias
      command: "{{ minio_client_bin }} alias set minio http://{{ ip_host3 }}:9000 {{ minio_access_key }} {{ minio_secret_key }}"

    - name: Add MinIO user
      command: "{{ minio_client_bin }} admin user add minio {{ new_minio_user }} {{ new_minio_passwd }}"
      ignore_errors: yes

    - name: Add MinIO user
      command: "{{ minio_client_bin }} admin policy attach minio readwrite --user {{ new_minio_user }}"
      ignore_errors: yes

    - name: Create MinIO bucket
      command: "{{ minio_client_bin }} mb minio/{{ minio_bucket_name }}"
      ignore_errors: yes

- name: HOST2 minio client
  hosts: host2
  become: true
  vars:
    minio_access_key: myReallyLongAccessKey
    minio_secret_key: mySuperSecretKey
    minio_client_bin: /usr/local/bin/mc
    new_minio_user: forme1
    new_users_passwd: deneme123456
    minio_bucket_name: bigbuck

  tasks:

    - name: Load vars from file
      include_vars:
        file: defaults/main.yml

    - name: Install wget
      dnf:
        name: wget
        state: present

    - name: Download Minio client
      become: yes
      command: wget https://dl.minio.io/client/mc/release/linux-amd64/mc -O {{ minio_client_bin }}

    - name: Set permissions for Minio client binary
      become: yes
      file:
        path: "{{ minio_client_bin }}"
        mode: "0755"

    - name: Set MinIO alias
      command: "{{ minio_client_bin }} alias set minio http://{{ ip_host3 }}:9000 {{ minio_access_key }} {{ minio_secret_key }}"

    - name: Touch Test File
      command: "touch testfile.txt"

    - name: Backup
      command: "{{ minio_client_bin }} cp testfile.txt minio/{{ minio_bucket_name }}"



- name: Host1 Add FTP File Transfer Cron Job
  hosts: host1
  become: true
  tasks:

    - name: Load vars from file
      include_vars:
        file: defaults/main.yml

    - name: Create script file
      ansible.builtin.copy:
        content: |
          #!/bin/bash
          file_name=$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 10)
          file_size=$((RANDOM%10+1))
          dd if=/dev/urandom of="$file_name" bs=1K count="$file_size"
          ftp -n {{ ip_host2 }} <<END_SCRIPT
          quote USER exoftp
          quote PASS tor
          cd ftp/files
          put "$file_name"
          quit
          END_SCRIPT
          rm "$file_name"
          echo "Done!"
        dest: /opt/ftp_transfer_script.sh
        mode: '0755'

    - name: FTP File Transfer
      ansible.builtin.lineinfile:
        path: /etc/crontab
        line: "* * * * * root /bin/bash /opt/ftp_transfer_script.sh"

- name: Host2 Backup Cron Job
  hosts: host2
  become: true
  tasks:

    - name: Load vars from file
      include_vars:
        file: defaults/main.yml

    - name: Create script file
      ansible.builtin.copy:
        content: |
          #!/bin/bash
          MINIO_URL="http://{{ ip_host3 }}:9000"
          ACCESS_KEY="myReallyLongAccessKey"
          SECRET_KEY="mySuperSecretKey"
          BUCKET_NAME="bigbuck"

          /usr/local/bin/mc alias set minio "$MINIO_URL" "$ACCESS_KEY" "$SECRET_KEY"

          FILES_DIR="/home/exoftp/ftp/files"

          if [ -d "$FILES_DIR" ]; then
          cd "$FILES_DIR" || exit 1

            if [ "$(ls -A .)" ]; then
              /usr/local/bin/mc cp --recursive . "minio/$BUCKET_NAME"
              echo "Dosyalar MinIO'ya başarıyla yüklendi."
            else
              echo "Belirtilen dizin boş."
            fi
          else
            echo "Belirtilen dizin bulunamadı: $FILES_DIR"
            exit 1
          fi

          exit 0
        dest: /opt/minio_backup.sh
        mode: '0755'

    - name: Add cron job to /etc/crontab
      ansible.builtin.lineinfile:
        path: /etc/crontab
        line: "* * * * * root /bin/bash /opt/minio_backup.sh"
